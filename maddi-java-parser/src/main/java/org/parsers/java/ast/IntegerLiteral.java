/*
 * maddi: a modification analyzer for duplication detection and immutability.
 * Copyright 2020-2025, Bart Naudts, https://github.com/CodeLaser/maddi
 *
 * This program is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
 * more details. You should have received a copy of the GNU Lesser General Public
 * License along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/* Generated by: CongoCC Parser Generator. Do not edit.
* Generated Code for IntegerLiteral Token subclass
* by the ASTToken.java.ctl template
*/
package org.parsers.java.ast;

import org.parsers.java.*;
import static org.parsers.java.Token.TokenType.*;


public class IntegerLiteral extends NumericalLiteral {

    public int getValue() {
        String image = removeUnderscores(toString());
        if (image.equals("0")) return 0;
        if (image.charAt(0) != '0') return Integer.parseInt(image);
        int secondChar = image.charAt(1);
        if (secondChar == 'x' || secondChar == 'X') {
            return Integer.parseInt(image.substring(2), 16);
        }
        if (secondChar == 'b' || secondChar == 'B') {
            return Integer.parseInt(image.substring(2), 2);
        }
        return Integer.parseInt(image.substring(1), 8);
    }

    static public String removeUnderscores(String s) {
        if (s.indexOf('_') < 0) return s;
        StringBuilder buf = new StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            int ch = s.charAt(i);
            if (ch != '_') buf.append(ch);
        }
        return buf.toString();
    }

    public IntegerLiteral(TokenType type, TokenSource tokenSource, int beginOffset, int endOffset) {
        super(type, tokenSource, beginOffset, endOffset);
    }

}


